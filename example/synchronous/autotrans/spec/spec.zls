open Autotransc

let node const2((i11, i12), (i21, i22))(tstep, _) = res1, res2 where
  rec res1 = Gen.const(i11, i12)(tstep, 0.)
  and res2 = Gen.const(i21, i22)(tstep, 0.)
  and init tmp =
    print_endline ("Picked values " ^ (Basics.stdform_of_float 2 2 res1) ^
                   " and " ^ (Basics.stdform_of_float 2 2 res2))

let node rand_horizon(h1, h2)(tstep, _) = e where
  rec t = 0. fby (t +. tstep)
  and init h = Gen.pick_float(h1, h2)
  and init tmp =
    print_endline ("Picked horizon " ^ (Basics.stdform_of_float 2 2 h))
  and ev = (t > h) && (true -> (pre t < h))
  and present ev -> do emit e = () done

let hybrid rand_inputs() = throttle, brake where
    rec der t = 1. init 0.
    and init h1 = Random.float 10.
    and init h2 = h1 +. Random.float 10.
    and init h3 = h2 +. Random.float 10.
    and init h4 = h3 +. Random.float 10.

    and throttle, brake =
        present
            | up(t -. h1) -> (0., Random.float 350.)
            | up(t -. h2) -> (Random.float 100., 0.)
            | up(t -. h3) -> (0., Random.float 350.)
            | up(t -. h4) -> (0., 0.)
        init (Random.float 100., 0.)

hybrid scenario() = rand_inputs()

let node clamp (lo, hi) v = if v < lo then lo else if v > hi then hi else v

node finish_falsified (t, v) =
    print_string "Falsified at t = "; print_float t;
    print_string " with value "; print_float v;
    print_newline ();
    Specutils.finish_falsified ()

node finish_done (t, v) =
    print_string "Done: t = "; print_float t;
    print_string " with value "; print_float v;
    print_newline ();
    Specutils.finish_done ()

node finish_timeout (t, v) =
    print_string "Timed out: t = "; print_float t;
    print_string " with value "; print_float v;
    print_newline ();
    Specutils.finish_timeout ()

let hybrid cli input_fun formula model maxt tstep () =
    let init tmp = Random.self_init () in

    let der t = 1. init 0. in

    let input = run input_fun () in
    let output = run model input in

    present (period(tstep)) ->
        let r = run formula (input, output) in
        Assert.assert_prop r
    else ()

let hybrid plot input_fun formula model show tstep () =
    let init tmp = Random.simple_init 56 in

    let der t = 1. init 0. in

    let input = run input_fun () in
    let output = run model input in

    present (period(tstep)) ->
        let r = run formula (input, output) in

        run show (
            t,
            input,
            output,
            clamp (-10000., 10000.) r
        )
    else ()

open Distribution
open Infer

let range1_low = 0. let range1_high = 100.
let range2_low = 0. let range2_high = 320.

let norm_factor = 5000.

let node particle model formula (pstate, (tstep, resample)) = phi where
  (* sample *)
  rec t = 0. -> pre t +. tstep
  and init lastid = 0
  and init id = Random.bits ()

  and init throttle = sample (pstate, uniform_float range1_low range1_high)
  and init brake = sample (pstate, uniform_float range2_low range2_high)

  and present resampled ->
    do
            lastid = last id
        and id = Random.bits ()
        and throttle = sample (pstate, uniform_float range1_low range1_high)
        and brake = sample (pstate, uniform_float range2_low range2_high)
    done

  (* model *)
  and rpm, gear, speed = Autotransd.autotrans (t, (throttle, brake))
  and (phi : float) = run formula ((throttle, brake), (rpm, gear, speed))

  and _ =
  let tmp = print_endline "{" in
  let tmp = print_endline ("\tlastid   : " ^ (string_of_int lastid)) in
  let tmp = print_endline ("\tid       : " ^ (string_of_int id)) in
  let tmp = print_endline ("\tt        : " ^ (string_of_float t)) in
  let tmp = print_endline ("\tThrottle : " ^ (string_of_float throttle)) in
  let tmp = print_endline ("\tBrake    : " ^ (string_of_float brake)) in
  let tmp = print_endline ("\tRPM      : " ^ (string_of_float rpm)) in
  let tmp = print_endline ("\tGear     : " ^ (string_of_float gear)) in
  let tmp = print_endline ("\tSpeed    : " ^ (string_of_float speed)) in
  let tmp = print_endline ("\tPhi      : " ^ (string_of_float phi)) in
  let tmp = print_endline "}" in ()

  (* new score = diff of phi so that last score + diff = new phi *)
  and score =
    if resampled then (* scores have been reset to 0 *)
        -. phi
    else
        (0. -> pre phi) -. phi

  and present (phi < 0.) ->
    do
        _ = print_endline ("Falsified at t = " ^ (string_of_float t) ^
                           " with value " ^ (string_of_float phi))
    done

  and resampled = false -> pre resample

  (* factor *)
  and () = factor (pstate, score /. norm_factor)

let static resampling_period = 1.

let node falsify n_particles model formula tstep =
    let rec t = 0. fby (t +. tstep) in

    let init tmp =
        print_endline ("n : " ^ (string_of_int n_particles) ^ "\n\n")
    in

    let
    rec counter =
        if true fby resample then resampling_period
        else (0. fby (counter -. tstep))
    and resample = counter < 0.
    in

    print_newline ();
    print_endline (if resample then "Resample" else "");
    print_newline ();

    infer_subresample n_particles (particle model formula) (resample, (tstep, resample))
