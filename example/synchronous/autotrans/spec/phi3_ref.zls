(* Property taken from
 *
 * Hoxha, B., Abbas, H., and Fainekos, G. E. (2014).
 * Benchmarks for temporal logic requirements for automotive systems.
 * In ARCH@CPSWeek.
 *
 * page 28
*)

let static tstep = 0.05
let static maxt  = 30.0

open Spec

node maneuver tstep = scenario tstep

(*
    There should be no transition from gear two to gear one and back
    to gear two in less than 2.5 sec.

    □((g2 ∧ X g1) ⇒ □_[0,2.5] ¬g2)
*)

let static dur = 2.5

node phi3((throttle, brake_torque), (rpm, gear, speed)) =
    let rec t = 0. -> pre t +. tstep in

    let g1 = min (gear -. 0.5) (1.5 -. gear) in
    let g2 = min (gear -. 1.5) (2.5 -. gear) in

    let rec automaton
        | Init ->
            do res = (-. g2) -> max (pre (-. g2)) g1
            and is_done = false
            until ((false -> (pre g2 >= 0.)) && (g1 >= 0.))
            then Main(t)
        | Main(t0) ->
            do
                res = ((-. g2) -> min (pre res) (-. g2))
                and is_done = false
            until (g2 >= 0.)               then False(res)
            else  (t > t0 +. dur -. tstep) then Init
        | False(f) ->
            do
                res = (min f (-. g2)) -> min (pre res) (-. g2)
                and is_done = true
            done
    in res, is_done

open Scope

node show(t, (throttle, brake_torque), (rpm, gear, speed), phi) =
    let s1 = scope2(0.  , 350. , ("throttle", linear, throttle),
                                 ("brake torque", linear, brake_torque))
    and s2 = scope (0.  , 4.   , ("gear", linear, gear))
    and s3 = scope (0.  , 200. , ("speed", linear, speed))
    and s4 = scope (600., 6000., ("rpm", linear, rpm))
    and s5 = scope2( -4.,    4., ("□((g2 ∧ X g1) ⇒ □<sub>[0," ^ (string_of_float dur) ^ "]</sub> ¬g2)", linear, phi)
                                 ("", linear, 0.)) in

    window5("Autotrans: phi3", 50., t, s1, s2, s3, s4, s5)

let node cli  () = cli  maneuver phi3 Autotransd.autotrans maxt tstep
let node plot () = plot maneuver phi3 Autotransd.autotrans show tstep
