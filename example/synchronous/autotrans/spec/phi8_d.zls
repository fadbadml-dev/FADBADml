(* Property taken from
 *
 * Hoxha, B., Abbas, H., and Fainekos, G. E. (2014).
 * Benchmarks for temporal logic requirements for automotive systems.
 * In ARCH@CPSWeek.
 *
 * page 28
*)

(* Recommended values:
   max_rpm  : 4500, 5000, 5200, 5500
   max_speed:  120,  160,  170,  200
*)

let static tstep     = 0.05
let static maxt      = 30.0
let static max_rpm   = 2000.
let static max_speed = 500.

open Obs
open Spec

hybrid maneuver () = 100., 0.
(* node maneuver tstep = scenario tstep *)

(*
    A gear increase from first to fourth in under 10secs, ending in an RPM
    above ω̄ within 2 seconds of that, should result in a vehicle speed
    above v̄.

    (g1 ∧ ◇_[0,10] (edge g4 ∧ ◇_[0,2] (w >= w̄)))) ⇒ □_[0,10] (g4 ∧ (w > w̄) ⇒ (v >= v̄))
  = (¬g1 ∨ (□_[0,10] (¬(edge g4) ∨ □_[0,2] (w < w̄)))) ∨ □_[0,10] (g4 ∧ (w > w̄) ⇒ (v >= v̄)))
  = ¬g1 ∨ (□_[0,10] (edge g4 ⇒ □_[0,2] (w < w̄)) ∨ □_[0,10] (¬g4 ∨ (w <= w̄) ∨ (v >= v̄)))
*)

node phi8((throttle, brake_torque), (rpm, gear, speed)) =
    let g1 = q_eqi (gear, 1.) in
    let g4 = q_eqi (gear, 4.) in
    let init_g1 = freeze g1 in

    (* from g1 to g4 in under 10. seconds *)
    let g1_to_g4 = q_and (init_g1, once_timed 10. (tstep, g4)) in

    (* rpm > max_rpm 2 seconds after g4 *)
    let rpm_gt_max_after_g4 =
        onceBfromfirstA_timed 2. (tstep, g4, q_gt (rpm, max_rpm)) in

    let speed_gt_max_speed_after_g4 =
        onceBfromfirstA_timed 2. (tstep, g4, q_gt (speed, max_speed)) in

    (* from g1 to g4 && rpm > max_rpm 2 seconds after g4
       =>
       speed > max_speed 2 seconds after g4
    *)
    implies (q_and (g1_to_g4, rpm_gt_max_after_g4), speed_gt_max_speed_after_g4)

open Scope

node show(t, (throttle, brake_torque), (rpm, gear, speed), phi) =

    let g1 = q_eqi (gear, 1.) in
    let g4 = q_eqi (gear, 4.) in
    let init_g1 = freeze g1 in

    (* from g1 to g4 in under 10. seconds *)
    let g1_to_g4 = q_and (init_g1, once_timed 10. (tstep, g4)) in

    (* rpm > max_rpm 2 seconds after g4 *)
    let rpm_gt_max_after_g4 =
        onceBfromfirstA_timed 2. (tstep, g4, q_gt (rpm, max_rpm)) in

    let speed_gt_max_speed_after_g4 =
        onceBfromfirstA_timed 2. (tstep, g4, q_gt (speed, max_speed)) in

    let present (speed_gt_max_speed_after_g4 < 0.) -> do
        _ = print_endline "neg"
    done in

    (* from g1 to g4 && rpm > max_rpm 2 seconds after g4
       =>
       speed > max_speed 2 seconds after g4
    *)
    let phi = implies (q_and (g1_to_g4, rpm_gt_max_after_g4), speed_gt_max_speed_after_g4) in


    let s1 = scope2(0.  , 350. , ("throttle", linear, throttle),
                                   ("brake torque", linear, brake_torque))
    (* and s2 = scope2(-1000.  , 4000.   , ("speed_gt_max_speed_after_g4", linear, speed_gt_max_speed_after_g4), ("", linear, 0.)) *)
    (* and s2 = scope (0.  , 4.   , ("gear", linear, gear)) *)
    and s2 = scope (0.  , 4.   , ("g1_to_g4", linear, once_timed 10. (tstep, g4)))
    and s3 = scope2(0.  , 200. , ("speed", linear, speed),
                                 ("max_speed", linear, max_speed))
    and s4 = scope2(600., 6000., ("rpm", linear, rpm),
                                 ("max_rpm", linear, max_rpm))
    and s5 = scope2( -4.,  4.,   ("(g1 ∧ ◇<sub>[0,10]</sub> (g4 ∧ ◇<sub>[0,2]</sub> (rpm ≥ max_rpm))) ⇒ □<sub>[0,10]</sub> (g4 ∧ (rpm ≥ max_rpm) ⇒ (speed ≥ max_speed))", linear, phi),
                                 ("", linear, 0.)) in

    window5("Autotrans spec", 50., t, s1, s2, s3, s4, s5)

(* node cli  () = falsify 100 Autotransd.autotrans phi8 tstep *)
hybrid cli  () = cli  maneuver phi8 Autotransc.autotrans maxt tstep ()
hybrid plot () = plot maneuver phi8 Autotransc.autotrans show tstep ()
