(*
  This example is adapted from a Simulink model:
  https://fr.mathworks.com/help/simulink/examples/modeling-an-automatic-transmission-controller.html

  This is a discrete implementation of the automatic transmission controller.

  Refer to the diff_plots folder to see comparisons between the continuous
  and the discrete versions of this model.
*)

open MyOp

(** utils **)

let node integrate_and_saturate(t, dx, x0, xmin, xmax) = x where
  rec timestep = t -> (t - pre t)
  and aux = x0 -> (pre aux + dx * timestep)
  and x = max xmin (min xmax aux)

(** main **)

let node engine(t, ti, throttle) = rpm where
  rec init init_rpm = make 0.
  and te = Common.lookup_engine(throttle, pre rpm)
  and drpm = te - ti
  and timestep = t -> (t - pre t)
  and rpm = integrate_and_saturate (t, scale drpm Common.engine_feedback_gain,
      init_rpm, make 600., make 6000.)

let node gearlogic(shift) = gear where
  rec init gear = make 1.
  and automaton
      | First  ->
          do
          until shift(Common.UP)
            then do next gear = make 2. in Second
      | Second ->
          do
          until shift(Common.DOWN)
            then do next gear = make 1. in First
          else  shift(Common.UP)
            then do next gear = make 3. in Third
      | Third  ->
          do
          until shift(Common.DOWN)
            then do next gear = make 2. in Second
          else  shift(Common.UP)
            then do next gear = make 4. in Fourth
      | Fourth ->
          do
          until shift(Common.DOWN)
            then do next gear = make 3. in Third

let node shiftlogic(t, speed, throttle) = gear where
  rec up_th = Common.lookup_interpup(throttle, gear)
  and dn_th = Common.lookup_interpdn(throttle, gear)

  and gear = gearlogic(shift)

  and automaton
      | SteadyState  ->
          do
          until (speed < dn_th)
            then DownShifting(t)
          else (speed > up_th)
            then UpShifting(t)
      | DownShifting(t0) ->
          do
          until (speed > dn_th)
            then SteadyState
          else (t > translate t0 Common.twait)
            then do emit shift = Common.DOWN in SteadyState
      | UpShifting(t0)   ->
          do
          until (speed < up_th)
            then SteadyState
          else (t > translate t0 Common.twait)
            then do emit shift = Common.UP in SteadyState

let node vehicle(t, out_torque, brake_torque) = (speed, trans_rpm) where
  rec timestep = t -> (t - pre t)
  and final_drive_ratio = scale out_torque Common.p_final_drive_ratio
  and aux1 = final_drive_ratio - ((make 0.) -> pre signed_load)
  and vehicle_inertia = scale aux1 Common.iv_inv
  and wheel_speed = (make Common.p_initial_wheel_speed) ->
    (pre wheel_speed + vehicle_inertia * timestep)
  and linear_speed = scale wheel_speed Common.l_speed_coef
  and mph = scale linear_speed Common.p_mph
  and road_load =
    translate
        (scale (sqr mph) Common.p_aerodynamic_drag)
        Common.p_drag_friction
  and sgn = MyOp.bad_sgn mph
  and brake = brake_torque + road_load
  and signed_load = scale brake sgn
  and trans_rpm = scale wheel_speed Common.p_final_drive_ratio
  and speed = mph

let node autotrans(t, (throttle, brake_torque)) = (rpm, gear, speed) where
  rec rpm = engine(t, ti, throttle)
  and gear = shiftlogic(t, speed, throttle)
  and ti, out_torque =
    Common.transmission(
        make 1000. -> pre rpm,
        (make 1.) -> pre gear,
        (make (Common.p_initial_wheel_speed *. Common.p_final_drive_ratio)) ->
            pre trans_rpm)
  and speed, trans_rpm = vehicle(t, out_torque, brake_torque)

open Maneuvers
open Scope

let static timestep = 0.05

let node go() = (t, throttle, brake_torque, rpm, gear, speed) where
  rec init tstep = make timestep
  and t = make 0. -> (pre t + tstep)

  (* and init throttle = make 84.0135993263
  and init brake_torque = make 279.482038615 *)
  and throttle, brake_torque = hard_braking_d(t)
  and () = diff throttle 0 2; diff brake_torque 1 2

  and rpm, gear, speed = autotrans(t, (throttle, brake_torque))

let q_lt (p1, p2) = p2 - p1
let q_and (p1, p2) = min p1 p2
node always p = res where rec res = p -> q_and (pre res, p)

let node main() =
  let (t, throttle, brake_torque, rpm, gear, speed) = go () in

  let rec init rpm_max = make 5000.
  and obs = always (q_lt (rpm, rpm_max)) in

  let s1 = scope2(0., 325., ("throttle", linear, get throttle),
                            ("brake torque", linear, get brake_torque))
  and s2 = scope3(0., 4., ("gear", linear, get gear),
                          ("dgear/dthrottle", linear, d gear 0),
                          ("dgear/dbrake", linear, d gear 1))
  and s3 = scope (0., 200., ("speed", linear, get speed))
  and s4 = scope3(-100., 100., ("dspeed/dthrottle", linear, d speed 0),
                               ("dspeed/dbrake", linear, d speed 1),
                               ("", linear, 0.))
  and s5 = scope2(600., 6000., ("rpm", linear, get rpm),
                               ("rpm_max", linear, get rpm_max))
  and s6 = scope3(-100., 100., ("drpm/dthrottle", linear, d rpm 0),
                               ("drpm/dbrake", linear, d rpm 1),
                               ("", linear, 0.))
  and s7 = scope (600., 6000., ("obs", linear, get obs))
  and s8 = scope3(-100., 100., ("dobs/dthrottle", linear, d obs 0),
                               ("dobs/dbrake", linear, d obs 1),
                               ("", linear, 0.)) in

  (* windown("Autotrans (discrete) - step: " ^
          (string_of_float timestep) ^ "s", 50., get t, [s1; s2; s3; s4; s5; s6]) *)
  windown("Autotrans (discrete) - step: " ^
          (string_of_float timestep) ^ "s", 50., get t, [s1; s5; s6; s7; s8])
